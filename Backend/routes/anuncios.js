const express = require("express");
const router = express.Router();
const Anuncio = require("../models/anunciosModel");
const app = express();
const upload = require("../lib/uploadConfigure");
const cote = require("cote");

router.get("/", async (req, res, next) => {
  try {
    // escribimos en el log el d del usuario logado en el API con JWT
    const userIdLogged = req.usuarioLogadoAPI;
    // Filters
    const filterbyName = req.query.name;
    const filterByType = req.query.for_sale;
    const filterByTag = req.query.tags;
    const page = req.query.page;
    // const minPrice = req.query.minprice;
    // const maxPrice = req.query.maxprice;

    // Pagination
    let limit = req.query.limit * 1; // 9 results per page
    let skip = req.query.skip;

    // Sorting
    const sort = req.query.sort;

    const filter = {};

    const queryObj = { ...req.query };
    let queryStr = JSON.stringify(queryObj);
    queryStr = queryStr.replace(/\b(gte|gt|lte|lt)\b/g, (match) => `$${match}`);
    const filterByPrice = JSON.parse(queryStr).price;

    if (page) {
      limit = 9;
      skip = (page * 1 - 1) * limit;
    } else {
      skip = 0;
    }

    if (filterbyName) {
      filter.name = new RegExp("^" + filterbyName, "i");
    }

    if (filterByType) {
      filter.for_sale = filterByType;
    }

    if (filterByPrice) {
      filter.price = filterByPrice;
    }

    if (filterByTag) {
      filter.tags = filterByTag.split(",");
    }

    //filter.owner = userIdLogged;

    let fields = req.query.fields;
    if (req.query.fields) {
      fields = req.query.fields.split(",");
    } else {
      fields = "-__v"; // To exclude this autogenerated field
    }

    console.log(filter);
    //const anuncios = await Anuncio.find();
    const anuncios = await Anuncio.filters(filter, skip, limit, sort, fields);
    res.json({ results: anuncios.length, data: anuncios });
  } catch (error) {
    next(error);
  }
});

// Retrieves all the available tags
router.get("/tags", async (req, res, next) => {
  try {
    const tags = await Anuncio.aggregate([
      { $unwind: "$tags" },
      {
        $group: {
          _id: "$tags",
        },
      },
    ]);
    console.log(tags);
    const uniqueTags = tags.map((tagObject) => tagObject._id);

    res.status(200).json({
      status: "Success",
      data: { uniqueTags },
    });
  } catch (error) {
    next(error);
  }
});

// Creates a new Ad
router.post("/", upload.single("photo"), async (req, res, next) => {
  try {
    const newAd = req.body;
    const ad = new Anuncio(newAd);
    ad.photo = req.file.filename;
    console.log("ad photo ", ad.photo);
    ad.owner = req.usuarioLogadoAPI;
    const createAd = await ad.save();

    // Creating a thumbnail from the image stored
    const requester = new cote.Requester({ name: "image-requester" });
    const resizeParams = {
      width: 100,
      height: 100,
      imagePath: `../public/avatares/${ad.photo}`,
    };

    requester.send({ type: "resize", ...resizeParams }, (result) => {
      console.log(result);
      console.log("Inside requester...");
    });

    res.status(201).json({
      status: "Success",
      data: createAd,
    });
    // const createAnuncio = await Anuncio.create(req.body);
  } catch (error) {
    next(error);
  }
});

// Find one Ad by _id
router.get("/:id", async (req, res, next) => {
  try {
    const anuncio = await Anuncio.findOne({ _id: req.params.id });
    res.json({ results: anuncio.length, data: anuncio });
  } catch (error) {
    next(error);
  }
});

module.exports = router;
